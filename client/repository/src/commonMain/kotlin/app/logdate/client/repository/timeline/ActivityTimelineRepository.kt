package app.logdate.client.repository.timeline

import app.logdate.shared.model.ActivityTimelineItem
import kotlinx.coroutines.flow.Flow
import kotlin.uuid.ExperimentalUuidApi
import kotlin.uuid.Uuid

/**
 * A repository that exposes the default user's activity timeline.
 *
 * A user's activity timeline can be thought of as an stream for a user's activities across any
 * data stored or connected to LogDate. An [ActivityTimelineRepository] consolidates these
 * activities into a single stream that can be observed by clients.
 *
 * Activities in the repository take the form of events that happen at a given time and location.
 * For example, visiting a friend's house at 12:51 p.m. on Thursday, July 18th, 2024. Or sharing a
 * photo at 3:12 p.m. on Friday, July 19th, 2024 while at a park.
 *
 * @see ActivityTimelineItem
 */
@OptIn(ExperimentalUuidApi::class)
interface ActivityTimelineRepository {
    val allItemsObserved: Flow<List<ActivityTimelineItem>>

    fun observeModelById(id: Uuid): Flow<ActivityTimelineItem>

    /**
     * Adds a new activity to the timeline.
     *
     * The ID is generated by the repository and will be unique for the current device. If the given
     * item already has an ID, it will be ignored, and a new ID will be generated.
     */
    suspend fun addActivity(item: ActivityTimelineItem)

    /**
     * Removes an existing activity from the timeline.
     *
     * Note that this only removes an activity from the current device's timeline and the current
     * user's data store. If the activity was shared with other users, they may still have a copy
     * of the activity. Implementations must make a best effort to remove the activity from
     * federated timelines.
     *
     * If the current user does not have permission to remove the activity, this method will throw
     * an exception.
     */
    suspend fun removeActivity(item: ActivityTimelineItem)

    /**
     * Updates an existing activity in the timeline.
     *
     * The ID of the item given will be used to find the existing item to update. If the item does
     * not exist, this method will throw an exception.
     *
     * @param item The updated activity to save.
     */
    suspend fun updateActivity(item: ActivityTimelineItem)

    fun fetchActivitiesByType(type: String): Flow<List<ActivityTimelineItem>>
}
